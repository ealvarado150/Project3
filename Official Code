from urllib.request import urlretrieve
URL_PATH = 'https://s3.amazonaws.com/tcmg476/http_access_log'
LOCAL_FILE = 'local_copy.log'
local_file, headers = urlretrieve(URL_PATH, LOCAL_FILE)
from datetime import datetime
import re
import urllib.request
fh = str(urllib.request.urlopen(URL_PATH).read())
ERRORS = []

# Total Requests
print("Total Requests")
total_requests = fh.count('local') + fh.count('remote')
print('Total Request:', total_requests)

#All Monthly Requests

#Total January Requests
month1 = re.findall(r'Jan/',fh)
print("Total January Requests:", len(month1))

#Total Feb Requests
month2 = re.findall(r'Feb/',fh)

#Total Mar Requests
month3 = re.findall(r'Mar/',fh)

#Total Apr Requests
month4 = re.findall(r'Apr/',fh)

#Total May Requests
month5 = re.findall(r'May/',fh)

#Total Jun Requests
month6 = re.findall(r'Jun/',fh)

#Total Jul Requests
month7 = re.findall(r'Jul/',fh)

#Total Aug Requests
month8 = re.findall(r'Aug/',fh)

#Total Sep Requests
month9 = re.findall(r'Sep/',fh)

#Total Oct Requests
month10 = re.findall(r'Oct/',fh)

#Total Nov Requests
month11 = re.findall(r'Nov/',fh)

#Total Dec Requests
month12 = re.findall(r'Dec/',fh)

output = ("Every months total requests:", "Total January Requests:", len(month1), "Total Febuary Requests:", len(month2), "Total March Requests:", len(month3), "Total April Requests:", len(month4), "Total May Requests:", len(month5), "Total June Requests:", len(month6), "Total July Requests:", len(month7), "Total August Requests:", len(month8), "Total September Requests:", len(month9), "Total October Requests:", len(month10), "Total November Requests:", len(month11), "Total December Requests:", len(month12))
print(*output, sep = "\n")


#Total Four Codes
NoSuccess = re.findall(r'("\s[4][0][0-9]\s)',fh)
str1 = ''.join(NoSuccess)
four_codes = re.findall(r'([4][0][0-9])',str1)
four_errors = list(map(int, four_codes))
print("Total Four Codes:",len(four_errors))

#total percentage of four codes
print("Total percentage of 4XX status codes")
NSpercent = len(four_errors)/total_requests
print(NSpercent)
print("Number in percentage: "+"{:.2%}".format(NSpercent));

#total three codes
Redirect = re.findall(r'("\s[3][0-9][0-9]\s)',fh)
str2 = ''.join(Redirect)
three_codes = re.findall(r'([3][0-9][0-9])',str2)
three_errors = list(map(int, three_codes))
print("Total Three Codes:",len(three_errors))

#total percentage of three codes
print("Total percentage of 3XX status codes")
RDpercent = len(three_codes)/total_requests
print(RDpercent)
print("Number in percentage: "+"{:.2%}".format(RDpercent));

#Most requested file
import collections
logfile = open('local_copy.log','r')
clean_log=[]
for line in logfile:
    try:
        clean_log.append(line[line.index("GET")+4:line.index("HTTP")])
    except:
        pass
counter = collections.Counter(clean_log)
for count in counter.most_common(1):
    print(str(count[1]) + "	" + str(count[0]))

#Least requested file
import collections
logfile = open('local_copy.log','r')
clean_log=[]
for line in logfile:
    try:
        clean_log.append(line[line.index("GET")+4:line.index("HTTP")])
    except:
        pass
counter = collections.Counter(clean_log)
for count in counter.most_common(25000):
    print(str(count[1]) + "	" + str(count[0]))
    
    
    
    
    














######################
# retrieve log file from URL
from urllib.request import urlretrieve
URL_PATH = 'https://s3.amazonaws.com/tcmg476/http_access_log'
LOCAL_FILE = 'local_copy.log'
local_file, headers = urlretrieve(URL_PATH, LOCAL_FILE)
from datetime import datetime
import re
import urllib.request
fh = str(urllib.request.urlopen(URL_PATH).read())
ERRORS = []

# Total Requests
print("Total Requests")
total_requests = fh.count('local') + fh.count('remote')
print('Total Request:', total_requests)

#Split Entire string & finding 4xx and 3xx instances
four_errors = []
three_errors = []
f = open('local_copy.log', 'rt')
for line in open(LOCAL_FILE):
    text= (line.split(' '))
    if not text or len(text) < 10:
      continue
    connection = text[8]
    printing_connection= connection.count('400')
    if line in printing_connection == 1:
        four_errors += 1
        print(four_errors)
    else:
        continue
     printing_connection= connection.count('300')
     if line in printing_connection == 1:
        three_errors += 1
        print(three_errors)
    else:
        continue   
   ######################


